-- ============================================================
-- Textbook Library System - Optimized Architecture
-- ============================================================
--
-- Purpose: Create a reusable textbook library
-- - Parse textbook structure (ToC, headers) once
-- - Store chapter/section → page mappings
-- - Allow multiple courses to use same textbook
-- - Fast topic → page assignment without re-parsing
--
-- ============================================================

-- ============================================================
-- TEXTBOOK LIBRARY (Global, shared across courses)
-- ============================================================

CREATE TABLE textbook_library (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(255) NOT NULL,
    authors VARCHAR(255),
    edition VARCHAR(50),
    isbn VARCHAR(20),
    publisher VARCHAR(255),
    subject VARCHAR(100), -- e.g., "Calculus", "Physics", "Chemistry"
    file_path TEXT NOT NULL,
    file_size_mb DECIMAL(10,2),
    total_pages INTEGER NOT NULL,
    cover_image_url TEXT,

    -- Parsing status
    parsed BOOLEAN DEFAULT false,
    parsed_at TIMESTAMPTZ,
    parsing_method VARCHAR(50), -- 'toc' or 'headers' or 'manual'

    -- Metadata
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),

    -- Make textbook identifiable by title+edition
    UNIQUE(title, edition)
);

CREATE INDEX idx_textbook_library_subject ON textbook_library(subject);
CREATE INDEX idx_textbook_library_parsed ON textbook_library(parsed);
CREATE INDEX idx_textbook_library_title ON textbook_library(title);

COMMENT ON TABLE textbook_library IS 'Global library of textbooks, parsed once and reused';

-- ============================================================
-- TEXTBOOK STRUCTURE (Chapters, Sections, Subsections)
-- ============================================================

CREATE TABLE textbook_sections (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    textbook_id UUID NOT NULL REFERENCES textbook_library(id) ON DELETE CASCADE,

    -- Hierarchical structure
    parent_section_id UUID REFERENCES textbook_sections(id) ON DELETE CASCADE,
    level INTEGER NOT NULL CHECK (level >= 0 AND level <= 5), -- 0=book, 1=chapter, 2=section, etc.

    -- Section identification
    section_number VARCHAR(20), -- e.g., "3.2.1"
    title TEXT NOT NULL, -- e.g., "The Chain Rule"

    -- Page range
    page_start INTEGER NOT NULL,
    page_end INTEGER NOT NULL,
    page_count INTEGER GENERATED ALWAYS AS (page_end - page_start + 1) STORED,

    -- For ordering
    order_index INTEGER DEFAULT 0,

    -- Keywords for matching (extracted or inferred)
    keywords TEXT[], -- e.g., ['derivative', 'chain rule', 'composite functions']

    -- Content summary (optional, generated by LLM)
    summary TEXT,

    created_at TIMESTAMPTZ DEFAULT NOW(),

    -- Ensure page_start <= page_end
    CHECK (page_start <= page_end),

    -- Unique section per textbook
    UNIQUE(textbook_id, section_number)
);

CREATE INDEX idx_textbook_sections_textbook ON textbook_sections(textbook_id);
CREATE INDEX idx_textbook_sections_parent ON textbook_sections(parent_section_id);
CREATE INDEX idx_textbook_sections_level ON textbook_sections(textbook_id, level);
CREATE INDEX idx_textbook_sections_pages ON textbook_sections(textbook_id, page_start, page_end);
CREATE INDEX idx_textbook_sections_keywords ON textbook_sections USING GIN(keywords);

COMMENT ON TABLE textbook_sections IS 'Hierarchical structure of textbook (chapters, sections, subsections) with page mappings';

-- ============================================================
-- COURSE TEXTBOOKS (Link courses to textbooks)
-- ============================================================

CREATE TABLE course_textbooks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    course_id UUID NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
    textbook_id UUID NOT NULL REFERENCES textbook_library(id) ON DELETE CASCADE,

    -- Is this the primary textbook or supplementary?
    is_primary BOOLEAN DEFAULT true,

    -- Optional: Course-specific section selections
    -- (e.g., "We're only covering chapters 1-5")
    included_sections UUID[], -- Array of textbook_section IDs

    created_at TIMESTAMPTZ DEFAULT NOW(),

    UNIQUE(course_id, textbook_id)
);

CREATE INDEX idx_course_textbooks_course ON course_textbooks(course_id);
CREATE INDEX idx_course_textbooks_textbook ON course_textbooks(textbook_id);

COMMENT ON TABLE course_textbooks IS 'Links courses to textbooks from the library';

-- ============================================================
-- TOPIC TO SECTION MAPPINGS (AI-generated or manual)
-- ============================================================

CREATE TABLE topic_section_mappings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    topic_id UUID NOT NULL REFERENCES topics(id) ON DELETE CASCADE,
    textbook_section_id UUID NOT NULL REFERENCES textbook_sections(id) ON DELETE CASCADE,

    -- How was this mapping created?
    mapping_method VARCHAR(50) DEFAULT 'ai', -- 'ai', 'manual', 'keyword_match'

    -- Confidence score (0-1) for AI-generated mappings
    confidence_score DECIMAL(3,2) CHECK (confidence_score >= 0 AND confidence_score <= 1),

    -- Relevance notes
    relevance_notes TEXT,

    -- Is this the primary reading for this topic?
    is_primary BOOLEAN DEFAULT true,

    created_at TIMESTAMPTZ DEFAULT NOW(),

    UNIQUE(topic_id, textbook_section_id)
);

CREATE INDEX idx_topic_mappings_topic ON topic_section_mappings(topic_id);
CREATE INDEX idx_topic_mappings_section ON topic_section_mappings(textbook_section_id);
CREATE INDEX idx_topic_mappings_primary ON topic_section_mappings(topic_id, is_primary);

COMMENT ON TABLE topic_section_mappings IS 'Maps course topics to textbook sections';

-- ============================================================
-- UPDATE reading_assignments TO USE SECTIONS
-- ============================================================

-- Add reference to textbook section instead of just page ranges
ALTER TABLE reading_assignments
    ADD COLUMN textbook_section_id UUID REFERENCES textbook_sections(id) ON DELETE SET NULL;

CREATE INDEX idx_reading_assignments_section ON reading_assignments(textbook_section_id);

COMMENT ON COLUMN reading_assignments.textbook_section_id IS 'Link to textbook section (if from parsed textbook)';

-- ============================================================
-- VIEWS FOR CONVENIENT QUERIES
-- ============================================================

-- View: Get all sections for a textbook with full hierarchy
CREATE VIEW textbook_toc AS
SELECT
    ts.id,
    ts.textbook_id,
    tl.title AS textbook_title,
    ts.level,
    ts.section_number,
    ts.title AS section_title,
    ts.page_start,
    ts.page_end,
    ts.page_count,
    ts.keywords,
    ts.parent_section_id,
    ts.order_index
FROM textbook_sections ts
JOIN textbook_library tl ON ts.textbook_id = tl.id
ORDER BY ts.textbook_id, ts.order_index;

COMMENT ON VIEW textbook_toc IS 'Complete table of contents for all textbooks';

-- View: Topics with their mapped textbook sections
CREATE VIEW topic_readings AS
SELECT
    t.id AS topic_id,
    t.name AS topic_name,
    ts.id AS section_id,
    ts.section_number,
    ts.title AS section_title,
    ts.page_start,
    ts.page_end,
    ts.page_count,
    tl.title AS textbook_title,
    tl.edition AS textbook_edition,
    tsm.confidence_score,
    tsm.is_primary
FROM topics t
JOIN topic_section_mappings tsm ON t.id = tsm.topic_id
JOIN textbook_sections ts ON tsm.textbook_section_id = ts.id
JOIN textbook_library tl ON ts.textbook_id = tl.id
WHERE tsm.is_primary = true;

COMMENT ON VIEW topic_readings IS 'Primary textbook sections for each topic';

-- ============================================================
-- UTILITY FUNCTIONS
-- ============================================================

-- Function: Search textbook sections by keyword
CREATE OR REPLACE FUNCTION search_textbook_sections(
    textbook_uuid UUID,
    search_keywords TEXT[],
    max_results INT DEFAULT 10
)
RETURNS TABLE (
    section_id UUID,
    section_number VARCHAR,
    title TEXT,
    page_start INT,
    page_end INT,
    match_count INT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        ts.id,
        ts.section_number,
        ts.title,
        ts.page_start,
        ts.page_end,
        (
            SELECT COUNT(*)
            FROM unnest(search_keywords) AS keyword
            WHERE keyword = ANY(ts.keywords)
        )::INT AS match_count
    FROM textbook_sections ts
    WHERE ts.textbook_id = textbook_uuid
      AND ts.keywords && search_keywords  -- Array overlap operator
    ORDER BY match_count DESC, ts.order_index ASC
    LIMIT max_results;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION search_textbook_sections IS 'Find textbook sections by keyword matching';

-- Function: Get chapter structure for a textbook
CREATE OR REPLACE FUNCTION get_textbook_structure(textbook_uuid UUID)
RETURNS TABLE (
    section_id UUID,
    level INT,
    section_number VARCHAR,
    title TEXT,
    page_start INT,
    page_end INT,
    parent_id UUID
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        ts.id,
        ts.level,
        ts.section_number,
        ts.title,
        ts.page_start,
        ts.page_end,
        ts.parent_section_id
    FROM textbook_sections ts
    WHERE ts.textbook_id = textbook_uuid
    ORDER BY ts.order_index;
END;
$$ LANGUAGE plpgsql;

-- Function: Auto-map topics to sections by keyword matching
CREATE OR REPLACE FUNCTION auto_map_topic_to_sections(
    p_topic_id UUID,
    p_textbook_id UUID,
    p_confidence_threshold DECIMAL DEFAULT 0.6
)
RETURNS TABLE (
    section_id UUID,
    confidence DECIMAL
) AS $$
DECLARE
    topic_name TEXT;
    topic_keywords TEXT[];
BEGIN
    -- Get topic name and derive keywords
    SELECT name INTO topic_name FROM topics WHERE id = p_topic_id;

    -- Simple keyword extraction (split by spaces, lowercase)
    topic_keywords := string_to_array(lower(topic_name), ' ');

    RETURN QUERY
    SELECT
        ts.id,
        CAST((
            SELECT COUNT(*)::DECIMAL / array_length(topic_keywords, 1)
            FROM unnest(topic_keywords) AS keyword
            WHERE keyword = ANY(ts.keywords)
        ) AS DECIMAL(3,2)) AS confidence
    FROM textbook_sections ts
    WHERE ts.textbook_id = p_textbook_id
      AND ts.keywords && topic_keywords
    HAVING (
        SELECT COUNT(*)::DECIMAL / NULLIF(array_length(topic_keywords, 1), 0)
        FROM unnest(topic_keywords) AS keyword
        WHERE keyword = ANY(ts.keywords)
    ) >= p_confidence_threshold
    ORDER BY confidence DESC;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION auto_map_topic_to_sections IS 'Automatically map a topic to textbook sections using keyword matching';

-- ============================================================
-- TRIGGERS
-- ============================================================

CREATE TRIGGER update_textbook_library_updated_at BEFORE UPDATE ON textbook_library
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================
-- ROW LEVEL SECURITY (Development - allow all)
-- ============================================================

ALTER TABLE textbook_library ENABLE ROW LEVEL SECURITY;
ALTER TABLE textbook_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE course_textbooks ENABLE ROW LEVEL SECURITY;
ALTER TABLE topic_section_mappings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow all for development" ON textbook_library FOR ALL USING (true);
CREATE POLICY "Allow all for development" ON textbook_sections FOR ALL USING (true);
CREATE POLICY "Allow all for development" ON course_textbooks FOR ALL USING (true);
CREATE POLICY "Allow all for development" ON topic_section_mappings FOR ALL USING (true);

-- ============================================================
-- SAMPLE DATA (For Testing)
-- ============================================================

-- Insert sample textbook
INSERT INTO textbook_library (id, title, authors, edition, subject, file_path, total_pages, parsed)
VALUES (
    '00000000-0000-0000-0000-000000001001',
    'Calculus: Early Transcendentals',
    'James Stewart',
    '8th Edition',
    'Calculus',
    '/uploads/stewart_calculus_8e.pdf',
    1368,
    true
) ON CONFLICT DO NOTHING;

-- Insert sample sections
INSERT INTO textbook_sections (textbook_id, level, section_number, title, page_start, page_end, keywords, order_index)
VALUES
    ('00000000-0000-0000-0000-000000001001', 1, '1', 'Functions and Models', 1, 72, ARRAY['function', 'model', 'graph', 'domain', 'range'], 1),
    ('00000000-0000-0000-0000-000000001001', 1, '2', 'Limits and Derivatives', 73, 156, ARRAY['limit', 'continuity', 'derivative', 'tangent'], 2),
    ('00000000-0000-0000-0000-000000001001', 2, '2.1', 'The Tangent and Velocity Problems', 73, 80, ARRAY['tangent', 'velocity', 'limit'], 3),
    ('00000000-0000-0000-0000-000000001001', 2, '2.2', 'The Limit of a Function', 81, 94, ARRAY['limit', 'definition', 'notation'], 4),
    ('00000000-0000-0000-0000-000000001001', 2, '2.8', 'The Derivative as a Function', 142, 156, ARRAY['derivative', 'function', 'notation', 'differentiable'], 5),
    ('00000000-0000-0000-0000-000000001001', 1, '3', 'Differentiation Rules', 157, 248, ARRAY['derivative', 'power rule', 'product rule', 'quotient rule', 'chain rule'], 6),
    ('00000000-0000-0000-0000-000000001001', 2, '3.1', 'Derivatives of Polynomials', 157, 168, ARRAY['derivative', 'polynomial', 'power rule'], 7),
    ('00000000-0000-0000-0000-000000001001', 2, '3.4', 'The Chain Rule', 195, 208, ARRAY['chain rule', 'composite', 'derivative'], 8)
ON CONFLICT DO NOTHING;

-- ============================================================
-- VALIDATION
-- ============================================================

DO $$
DECLARE
    table_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO table_count
    FROM information_schema.tables
    WHERE table_schema = 'public'
      AND table_name IN (
          'textbook_library',
          'textbook_sections',
          'course_textbooks',
          'topic_section_mappings'
      );

    IF table_count = 4 THEN
        RAISE NOTICE '✓ All 4 textbook library tables created successfully';
    ELSE
        RAISE WARNING 'Expected 4 tables, found %', table_count;
    END IF;
END $$;
